unit uThread;

interface

uses Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.WinXCtrls, Vcl.StdCtrls,
  Vcl.Samples.Gauges, Vcl.Samples.Spin,uExportacao,uControleSQL;

type
  TThreadExportacao = class(TThread)
  private

    Value:String;
    FValue: string;
    FMemo: TMemo;
    FPath: String;
    Flabel1: TLabel;
    Fcontador:integer;
    procedure SincronizarMemo;
    procedure SetValue(const Value: string);
    procedure SetMemo(const Value: TMemo);
    procedure SetPath(const Value: String);
    procedure Setlabel1(const Value: TLabel);
  protected
    procedure Execute; override;
    constructor Create; reintroduce;
  public
   property Memo : TMemo read FMemo write SetMemo;
   property caminho :String read FPath write SetPath;
   property label1:TLabel read Flabel1 write Setlabel1;
//   property Value:string read FValue write SetValue;
  end;
 TThreadGravaDados = class(TThread)
   private
    prword:string;
    TSQL: TExecSQL;
    FStringFULLREVValue: TStringList;
    FStringFULLORDValue: TStringList;
    FStringREVValue: TStringList;
    FStringORDValue: TStringList;
    FMemo: TMemo;
    FContador:integer;
    FLabel1: TLabel;
    procedure insertnw;
    procedure SetStringFULLORDValue(const Value: TStringList);
    procedure SetStringFULLREVValue(const Value: TStringList);
    procedure SetStringORDValue(const Value: TStringList);
    procedure SetStringREVValue(const Value: TStringList);
    function  ValorOrd(pword:String):integer;
    function  ValorRev(pword:String):integer;
    function  ValorFULLOrd(pword:String):integer;
    function  ValorFULLRev(pword:String):integer;
    procedure SetMemo(const Value: TMemo);
    procedure SetLabel1(const Value: TLabel);
   protected
    procedure Execute; override;
    constructor Create; reintroduce;

   public
    property StringORDValue:TStringList read FStringORDValue write SetStringORDValue;
    property StringREVValue:TStringList read FStringREVValue write SetStringREVValue;
    property StringFULLORDValue:TStringList read FStringFULLORDValue write SetStringFULLORDValue;
    property StringFULLREVValue:TStringList read FStringFULLREVValue write SetStringFULLREVValue;
     property Memo : TMemo read FMemo write SetMemo;
     property Label1:TLabel read FLabel1 write SetLabel1;
 end;

implementation

{ TThreadExportacao }

constructor TThreadExportacao.Create;
begin
  inherited
  Create(True);
  FreeOnTerminate := True;
  Fcontador:=0;
end;

procedure TThreadExportacao.Execute;
var
 arq: TextFile; { declarando a variável "arq" do tipo arquivo texto }
 path,linha: string;
begin
    AssignFile(arq, caminho);
    Reset(arq);
  inherited;

  if not Terminated then
  try
     if (IOResult <> 0) then
        showmessage('Erro na abertura do arquivo !!!')
        else
         while (not eof(arq)) do
           begin

              readln(arq, linha);

              Value:=linha;
              Synchronize(SincronizarMemo);
              Application.ProcessMessages

           end;
           CloseFile(arq);
           MessageDlg('Palavras gravadas com sucesso!',mtConfirmation,[mbOK],1 );
  finally

  end;

end;

procedure TThreadExportacao.Setlabel1(const Value: TLabel);
begin
  Flabel1 := Value;
end;

procedure TThreadExportacao.SetMemo(const Value: TMemo);
begin
  FMemo := Value;
end;

procedure TThreadExportacao.SetPath(const Value: String);
begin
  FPath := Value;
end;

procedure TThreadExportacao.SetValue(const Value: string);
begin
  FValue := Value;
end;

procedure TThreadExportacao.SincronizarMemo;
begin
 Memo.Lines.Add(UpperCase(value));
 inc(Fcontador,1);
 label1.Caption := 'Palavras na área de transferência: '+inttostr(Fcontador);
end;

{ TThreadGravaDados }

constructor TThreadGravaDados.Create;
begin
  inherited
  Create(True);
  FreeOnTerminate := True;
  FContador:=0;
end;

procedure TThreadGravaDados.Execute;
var
i:integer;
begin
  inherited;
  if not Terminated then
    try
      for I := 0 to Memo.Lines.Count-1 do
          begin
            prword:=(Memo.Lines.Strings[I]);
            Synchronize(insertnw);
            prword:=EmptyStr;
          end;
    finally
     FContador:=0;
    end;
end;

procedure TThreadGravaDados.insertnw;
var
  wSQL:string;
begin
  if not Assigned(TSQL) then
    TSQL:= TExecSQL.Create;
  // chamada de métodos para pegar os valores das palavras
//  ValorFULLOrd(word);
//  ValorFULLRev(word);
//  ValorOrd(word);
  wSQL := EmptyStr;
  wSQL := 'update or insert into WORDSTB (BDWORD,ORDVALUE,REVALUE,FULLORDVALUE,FULLREVALUE) ';
  wSQL := wSQL + ' values (UPPER('+QuotedStr(prword)+'),'+inttostr(ValorORD(prword))+','+inttostr(ValorREV(prword))+','+IntToStr(ValorFULLOrd(prword))+','+IntToStr(ValorFULLRev(prword))+')';
  TSQL.SQL(wSQL);
  Inc(FContador,1);
  Label1.Caption:='Palavras importadas: '+inttostr(FContador);
//  ShowMessage('GRAVOU');



end;
procedure TThreadGravaDados.SetLabel1(const Value: TLabel);
begin
  FLabel1 := Value;
end;

procedure TThreadGravaDados.SetMemo(const Value: TMemo);
begin
  FMemo := Value;
end;

procedure TThreadGravaDados.SetStringFULLORDValue(const Value: TStringList);
begin
  FStringFULLORDValue := Value;
end;

procedure TThreadGravaDados.SetStringFULLREVValue(const Value: TStringList);
begin
  FStringFULLREVValue := Value;
end;

procedure TThreadGravaDados.SetStringORDValue(const Value: TStringList);
begin
  FStringORDValue := Value;
end;

procedure TThreadGravaDados.SetStringREVValue(const Value: TStringList);
begin
  FStringREVValue := Value;
end;



function TThreadGravaDados.ValorFULLOrd(pword: String): integer;
var
  wValorFULLord,
  i,j:integer;
begin

  wValorFULLord:=0;
  for i := 0 to (pword.Length) do
  begin
          for j := 0 to StringFULLORDValue.Count -1 do
              begin
                    if UpperCase(pword[i]) = UpperCase(StringFULLORDValue[j]) then
                        begin
                          wValorFULLord := wValorFULLord + integer(StringFULLORDValue.Objects[j]);
                        end;
              end;

  end;
  Result:=wValorFULLord;
//  ShowMessage('valor FULLORD: '+IntToStr(wValorFULLord));

end;

function TThreadGravaDados.ValorFULLRev(pword: String): integer;
var
  wValorFULLrev,
  i,j:integer;
begin

  wValorFULLrev:=0;
  for i := 0 to (pword.Length) do
  begin
          for j := 0 to StringFULLREVValue.Count -1 do
              begin
                    if UpperCase(pword[i]) = UpperCase(StringFULLREVValue[j]) then
                        begin
                          wValorFULLrev := wValorFULLrev + integer(StringFULLREVValue.Objects[j]);
                        end;
              end;

  end;
  Result:=wValorFULLrev;
//  ShowMessage('valor FULLREV: '+IntToStr(wValorFULLrev));

end;

function TThreadGravaDados.ValorOrd(pword: String): integer;
var
  wValorOrdinal,
  i,j:integer;
begin

  wValorOrdinal:=0;
  for i := 0 to (pword.Length) do
  begin
          for j := 0 to StringORDValue.Count -1 do
              begin
                    if UpperCase(pword[i]) = UpperCase(StringORDValue[j]) then
                        begin
                          wValorOrdinal := wValorOrdinal + integer(StringORDValue.Objects[j]);
                        end;
              end;

  end;
  Result:=wValorOrdinal;
//  ShowMessage('valor ordinal: '+IntToStr(wValorOrdinal));

end;

function TThreadGravaDados.ValorRev(pword: String): integer;
var
  wValorReverso,
  i,j:integer;
begin

  wValorReverso:=0;
  for i := 0 to (pword.Length) do
  begin
          for j := 0 to StringORDValue.Count -1 do
              begin
                    if UpperCase(pword[i]) = UpperCase(StringREVValue[j]) then
                        begin
                          wValorReverso := wValorReverso + integer(StringREVValue.Objects[j]);
                        end;
              end;

  end;
  Result:=wValorReverso;
//  ShowMessage('valor REVERSO: '+IntToStr(wValorReverso));

end;

end.

